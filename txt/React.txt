선영표 선생님

1일차=====================
node js 다운>
cmd > cd ctrl + v > code .
npx create-react-app project01
npm start

2일차=====================
JSX 문법 규칙 4번째
JSX 문법에서 스타일 적용시! 객체 형태로 사용해야 한다!
JSX 규칙 ->
1. return 안에 있는 태그가 2개 이상이라면 
   반드시 부모 태그가 있어야 한다.
   하나의 태그로 묶여 있어야 한다.
2. {}를 사용해서 JS에 있는 값을 이용할 수 있다.(표현식)
   -->제어문은 사용할 수 없다. if, for etc...
   삼항연산자 or && 등을 이용
3. class라는 키워드 대신에 className을 이용한다.
4. 태그 안에 style을 사용해 줄 때에는 객체형식으로 사용해야 한다

컴포넌트란
1. 화면의 구성 요소 -- 일부분 혹은 전체
2. 사용자 정의 태그
3. 싱글 페이지 어플리케이션을 할 수 있게 도와준다!
4. 컴포넌트의 이름은 반드시 대문자로 시작해야 한다


3일차=========================
es7 redux 설치
rafce 자동완성

// rafce + Enter

import React from 'react'

const Ex01 = () => {

    /* React Event
        1. onClick={함수이름}
            이 때, 선언되어있는 함수가 아니라면 바로 호출 
            onClick={ck} (O)
            onClick={()=>{}} (O)
    */
    /* State 
    - 변수는 값이 변한다고 해서 화면이 다시 렌더링되지는 않는다. 
        만약 화면에 변수를 바뀐값으로 띄워주려면 바뀔때마다 재 렌더링을
        해줘야함 
    - state는 컴포넌트 내부에서 관리되는 변경이 가능한 데이터,
        값이 바뀔때마다 화면이 재렌더링되어서 반응이 빠름 
    */
    let num = 0;

    const ck = ()=>{
        console.log('ck')
        num ++ ; 
        console.log('현재 num은', num)
    }
  return (
    <div>
        <p>{num}</p>
        <button onClick={ck}>+1</button>
    </div>
  )
}

export default Ex01

Component 
- 리액트로 만들어진 앱을 이루는 최소 단위 
- 사용자 정의 태그 

=> rafce + Enter 

Props 
상위 컴포넌트에서 하위컴포넌트로 값을 전달한다. 
<MenuItem name="아메리카노"/>
===** 
const MenuItem = (props)=>{}


4일차================================
** 일반적으로 num이라는 변수에 3을 선언 
** num이라는 변수안에 5을 대입 

let num = 3; 
num = 5;

** 화면에 바로 변화될 변수 num2를 만들어서 3을 선언 
** num2라는 변수 안에 5를 대입 

const [num2,setNum2] = useState(3);
setNum2(5) 


5일차==================================

React 핵심 4가지 

1. 컴포넌트 (Component) 
> 내가 직접 만드는 태그 (사용자 정의 태그) 
> 대문자로 시작
> 리액트를 이루는 최소단위
 
2. Props 
> 상위 컴포넌트에서 하위 컴포넌트로 값을 전달할 때 사용 
 ex) <MenuBox name="아메리카노"/>
   const MenuBox = ({name})=>{ console.log(name) }

3. State 
> 화면에서 바로바로 변화하는 값


6일차=======================================
1. Component
- 대문자로 시작 <MenuItem.jsx>
- import / export
=>rafce Enter

2. 상위 컴포넌트 => 하위 컴포넌트:props
App.js <MenuItem>

3. state
변수와의 차이점? state는 화면에서 바로 변경되는 값

4.Map 함수
- 기존 배열에서, 특정 조건에 해당하는 요소들만 빼서 새로운 배열을 만들어주는 것
> 기존 배열은 손대지 않고, 새로운 배열을 생성

5.하위 컴포넌트 => 상위 컴포넌트 : 불가능
React 단방향으로 정보를 전달하는 라이브러리
함수를 생성해서 간접적으로 데이터를 전달

6. LifeCycle UseEffect
- 컴포넌트도 생애주기가 발생
1) 컴포넌트가 처음 생성됐을 때
    => 컴포넌트 시작~return 사이
2) 컴포넌트가 화면에 렌더링 되고 있을 때
    => return문 안에 작성
3) 컴포넌트가 화면에 렌더링이 되었을 때 (직후)
    => UseEffect(함수, 비어있는 배열)
4) 컴포넌트에 값이 변경되었을 때 (state,props...etc)
   => num이 변경되었을 때, 특정 함수를 실행시켜줘! 
   => useEffect(함수,[num])

6일차==============================================
Router 

1. 
사용자가 주소를 입력하면 해당 주소를 감지하는 역할 => BrowserRouter 
나의 Application 전체적으로 감싸주기!
index.js 에 쓰셔도 되고 
App.js 에 전체적으로 감싸도 됨! 

2. 
- 여러 경로를 감싸서, 사용자가 요청한 조건에 맞는 경로만 렌더링 해주는 역할 Routes 
(옛날이름 :Switch) 

- 경로 ? Route 
 > path => 어디로?
 > element => 그 path를 찾았을때 어떤 컴포넌트? 

실제 이동할 떄 사용 2
1.a태그를 대신하지만, 실제로 페이지 이동을 하는 것이 아니라 URL 주소 값을 바꿔주는 태그? Link 
2. 이동하는 리액트 훅 useNavigate 

[리액트 부트스트랩 사용하기]
1. 설치 
npm install react-bootstrap bootstrap
2. importing Components
import { Button } from 'react-bootstrap';
3. CSS 적용 
import 'bootstrap/dist/css/bootstrap.min.css';

[리액트 총정리] 

1. "엥? 값이 바뀌는데 화면엔 안바뀌네?" =>useState 
2. "엥? 좀... 값이.. 엇박으로 바뀌는데? " => useEffect 
3. "음.. 상위 컴포넌트에서 값을 하위로 보내고싶다.." => props 
4. "화면에 대고 for문 이용하고싶다.." => map함수 
5. "화면 페이지 이동시키고싶다" => Router 
   *** BrowserRouter 없으면 Link 안먹음 
6. "데이터를 가져오고싶은데?" (백앤드, open API)  => axios

[Axios] 

- "다른 곳에서 데이터를 받아오거나, 내가 받은 데이터를 다른곳으로 보내주고싶어" 
- 그 곳이 백앤드 OK, openAPI OK 
=> 비동기통신 (aJax, Fetch, Axios) 

리액트에서는 axios 많이 사용함 왜? 기능이 많고, 줄임이 편해서 

1. "음.. 데이터 가져오고싶다" 
axios.get(url)
.then()
.then() 

2. "음.. 데이터 보내주고싶어.. 근데 .. 별로 보안이 중요하지 않은 데이터" 
axios.get(url, {data : 'abc'})
.then()
.then() 

3. "이 데이터 보내주고싶은데, 보안이 중요한 데이터야" (아이디/비밀번호 정보, 계좌번호 정보.. ) 
axios.post(url, {data : 'abc})
.then((가나다)=>{console.log(가나다)})
.then()
.then()
.then()



- 보안이 중요하지 않은 데이터 http://www.naver.com?item=123472&categories=3 (get방식) 
- 보안이 중요한 데이터  (post방식)

API 

프론트엔드 : 화면에 보여지는 모든 일 
백앤드 : 그 외 (서버, DB ...) 

둘 사이에 주고받는 정보들 : API 
"엥.. 나는 백앤드가 없엉ㅠ 그래서 사람들이 오픈해놓은 데이터를 가져다가 쓸래"
=> open API 

1) 리액트 부트스트랩 설치 
npm install react-bootstrap bootstrap

2) css import 
import 'bootstrap/dist/css/bootstrap.min.css';

1. Header.jsx 
nav('/') => window.location.replace('/')

2. Login.jsx 
nav('/') => window.location.replace('/')

변경하는 이유는?
리액트는 SPA (Single Page Applcation)이기 때문에
새로고침이 필요할 때는 해당 문법을 사용해야함
window.location.replace()